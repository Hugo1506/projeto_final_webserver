import launch
import launch.actions
import launch.substitutions
import launch_ros.actions
import os
import json

def generate_launch_description():
    user_id = launch.substitutions.LaunchConfiguration('user_id')
    simulation_number = launch.substitutions.LaunchConfiguration('simulation_number')
    
    generate_params_cmd = launch.actions.ExecuteProcess(
        cmd=['python3', 'generate_launch_params.py', user_id, simulation_number],
        output='screen'
    )

    # Read the parameters generated by the script
    params_path = '/tmp/gaden_launch_params.json'
    
    # Save the parameters to a temporary file
    def save_params_to_file(context):
        params = context.locals.launch_configurations['stdout']
        with open(params_path, 'w') as f:
            f.write(params)
    
    save_params = launch.actions.OpaqueFunction(function=save_params_to_file)

    # Load parameters from the temporary file
    with open(params_path, 'r') as f:
        params = json.load(f)
    
    return launch.LaunchDescription([
        launch.actions.DeclareLaunchArgument('user_id'),
        launch.actions.DeclareLaunchArgument('simulation_number'),
        generate_params_cmd,
        save_params,
        launch_ros.actions.Node(
            package='your_package',
            executable='gaden_preprocessing',
            name='gaden_preprocessing',
            output='screen',
            parameters=[{
                'model_0': params['cad_files'][0] if len(params['cad_files']) > 0 else '',
                'model_1': params['cad_files'][1] if len(params['cad_files']) > 1 else '',
                'wind_files': params['wind_files'],
                'free_point': params['free_point'],
                'cell_size': params['cell_size']
            }]
        )
    ])

if __name__ == '__main__':
    generate_launch_description()
